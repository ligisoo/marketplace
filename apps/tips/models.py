from django.db import models
from django.conf import settings
from django.utils import timezone
from datetime import timedelta
import json


class Tip(models.Model):
    """Betting tip model with OCR support"""
    
    STATUS_CHOICES = [
        ('pending_approval', 'Pending Approval'),
        ('active', 'Active'),
        ('archived', 'Archived'),
        ('rejected', 'Rejected'),
    ]
    
    BOOKMAKER_CHOICES = [
        ('betika', 'Betika'),
        ('sportpesa', 'SportPesa'),
        ('betin', 'Betin'),
        ('mozzart', 'Mozzart'),
        ('odibets', 'Odibets'),
        ('other', 'Other'),
    ]
    
    # Basic tip information
    tipster = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='tips')
    bet_code = models.CharField(max_length=50, unique=True)
    bookmaker = models.CharField(max_length=20, choices=BOOKMAKER_CHOICES, default='betika')
    odds = models.DecimalField(max_digits=10, decimal_places=2)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    
    # Screenshot and OCR data
    screenshot = models.ImageField(upload_to='betslips/')
    match_details = models.JSONField(default=dict, help_text='OCR extracted match details')
    preview_data = models.JSONField(default=dict, help_text='Preview data for buyers')
    
    # Status and timestamps
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending_approval')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    expires_at = models.DateTimeField(help_text='When tip expires (last match start time)')
    
    # OCR processing
    ocr_processed = models.BooleanField(default=False)
    ocr_confidence = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    
    # Results tracking
    is_resulted = models.BooleanField(default=False)
    is_won = models.BooleanField(default=False)
    result_verified_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['status', 'created_at']),
            models.Index(fields=['tipster', 'status']),
            models.Index(fields=['expires_at']),
        ]
    
    def __str__(self):
        return f"{self.bet_code} - {self.tipster.userprofile.display_name}"
    
    @property
    def is_active(self):
        """Check if tip is currently active"""
        return self.status == 'active' and self.expires_at > timezone.now()
    
    @property
    def time_until_expiry(self):
        """Get time remaining until tip expires"""
        if self.expires_at > timezone.now():
            return self.expires_at - timezone.now()
        return timedelta(0)
    
    @property
    def purchase_count(self):
        """Get number of purchases for this tip"""
        return self.purchases.filter(status='completed').count()
    
    @property
    def revenue_generated(self):
        """Calculate total revenue generated by this tip"""
        return self.purchases.filter(status='completed').aggregate(
            total=models.Sum('amount')
        )['total'] or 0
    
    def get_preview_matches(self):
        """Get preview match information for buyers"""
        matches = self.preview_data.get('matches', [])
        return matches[:2]  # Show only first 2 matches in preview
    
    def can_be_purchased(self):
        """Check if tip can be purchased"""
        return (
            self.status == 'active' and 
            self.expires_at > timezone.now() and
            self.ocr_processed
        )
    
    def auto_archive_if_expired(self):
        """Automatically archive tip if expired"""
        if self.status == 'active' and self.expires_at <= timezone.now():
            self.status = 'archived'
            self.save(update_fields=['status', 'updated_at'])
            return True
        return False


class TipMatch(models.Model):
    """Individual match within a betting tip"""
    tip = models.ForeignKey(Tip, on_delete=models.CASCADE, related_name='matches')
    
    # Match information
    home_team = models.CharField(max_length=100)
    away_team = models.CharField(max_length=100)
    league = models.CharField(max_length=100, blank=True)
    match_date = models.DateTimeField()
    
    # Betting market
    market = models.CharField(max_length=100)  # e.g., "Over 2.5", "1X2", "Both Teams to Score"
    selection = models.CharField(max_length=100)  # e.g., "Over", "1", "Yes"
    odds = models.DecimalField(max_digits=6, decimal_places=2)
    
    # Result tracking
    is_resulted = models.BooleanField(default=False)
    is_won = models.BooleanField(default=False)
    actual_result = models.CharField(max_length=100, blank=True)
    
    # API tracking
    api_match_id = models.CharField(max_length=50, blank=True, help_text='API-Football match ID')
    
    class Meta:
        ordering = ['match_date']
    
    def __str__(self):
        return f"{self.home_team} vs {self.away_team} - {self.market}"


class TipPurchase(models.Model):
    """Purchase record for tips"""
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('refunded', 'Refunded'),
    ]
    
    tip = models.ForeignKey(Tip, on_delete=models.CASCADE, related_name='purchases')
    buyer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='tip_purchases')
    amount = models.DecimalField(max_digits=8, decimal_places=2)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    
    # Payment details
    transaction_id = models.CharField(max_length=100, unique=True)
    mpesa_receipt = models.CharField(max_length=50, blank=True)
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
        unique_together = ['tip', 'buyer']  # One purchase per buyer per tip
    
    def __str__(self):
        return f"{self.buyer.userprofile.display_name} - {self.tip.bet_code}"


class TipView(models.Model):
    """Track tip views for analytics"""
    tip = models.ForeignKey(Tip, on_delete=models.CASCADE, related_name='views')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)
    ip_address = models.GenericIPAddressField()
    user_agent = models.TextField(blank=True)
    viewed_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-viewed_at']

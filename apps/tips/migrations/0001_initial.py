# Generated by Django 5.0 on 2025-10-26 18:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bet_code', models.CharField(max_length=50, unique=True)),
                ('bookmaker', models.CharField(choices=[('betika', 'Betika'), ('sportpesa', 'SportPesa'), ('betin', 'Betin'), ('mozzart', 'Mozzart'), ('odibets', 'Odibets'), ('other', 'Other')], default='betika', max_length=20)),
                ('odds', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('screenshot', models.ImageField(upload_to='betslips/')),
                ('match_details', models.JSONField(default=dict, help_text='OCR extracted match details')),
                ('preview_data', models.JSONField(default=dict, help_text='Preview data for buyers')),
                ('status', models.CharField(choices=[('pending_approval', 'Pending Approval'), ('active', 'Active'), ('archived', 'Archived'), ('rejected', 'Rejected')], default='pending_approval', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(help_text='When tip expires (last match start time)')),
                ('ocr_processed', models.BooleanField(default=False)),
                ('ocr_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('is_resulted', models.BooleanField(default=False)),
                ('is_won', models.BooleanField(default=False)),
                ('result_verified_at', models.DateTimeField(blank=True, null=True)),
                ('tipster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tips', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TipMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_team', models.CharField(max_length=100)),
                ('away_team', models.CharField(max_length=100)),
                ('league', models.CharField(blank=True, max_length=100)),
                ('match_date', models.DateTimeField()),
                ('market', models.CharField(max_length=100)),
                ('selection', models.CharField(max_length=100)),
                ('odds', models.DecimalField(decimal_places=2, max_digits=6)),
                ('is_resulted', models.BooleanField(default=False)),
                ('is_won', models.BooleanField(default=False)),
                ('actual_result', models.CharField(blank=True, max_length=100)),
                ('api_match_id', models.CharField(blank=True, help_text='API-Football match ID', max_length=50)),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='tips.tip')),
            ],
            options={
                'ordering': ['match_date'],
            },
        ),
        migrations.CreateModel(
            name='TipPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('mpesa_receipt', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tip_purchases', to=settings.AUTH_USER_MODEL)),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='tips.tip')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TipView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='tips.tip')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='tip',
            index=models.Index(fields=['status', 'created_at'], name='tips_tip_status_9b0e25_idx'),
        ),
        migrations.AddIndex(
            model_name='tip',
            index=models.Index(fields=['tipster', 'status'], name='tips_tip_tipster_221a1c_idx'),
        ),
        migrations.AddIndex(
            model_name='tip',
            index=models.Index(fields=['expires_at'], name='tips_tip_expires_1c24b9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tippurchase',
            unique_together={('tip', 'buyer')},
        ),
    ]
